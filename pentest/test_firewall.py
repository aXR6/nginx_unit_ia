import sys
import types
import subprocess


def _import_firewall():
    # Prepare dummy dependencies so firewall can be imported
    import importlib
    sys.modules.setdefault("psycopg2", types.ModuleType("psycopg2"))
    extras_mod = types.ModuleType("psycopg2.extras")
    setattr(extras_mod, "RealDictCursor", object)
    setattr(extras_mod, "Json", object)
    sys.modules.setdefault("psycopg2.extras", extras_mod)
    dotenv_mod = types.ModuleType("dotenv")
    setattr(dotenv_mod, "load_dotenv", lambda *a, **k: None)
    sys.modules.setdefault("dotenv", dotenv_mod)
    if "app.firewall" in sys.modules:
        del sys.modules["app.firewall"]
    return importlib.import_module("app.firewall")


def test_block_and_unblock_ip(monkeypatch):
    firewall = _import_firewall()
    calls = []

    def fake_run(cmd, **kwargs):
        calls.append(cmd)
        class Result:
            stdout = ""
        return Result()

    monkeypatch.setattr(subprocess, "run", fake_run)
    monkeypatch.setattr(firewall, "is_whitelisted", lambda ip: False)
    monkeypatch.setattr(firewall, "is_ip_blocked", lambda ip: False)
    monkeypatch.setattr(firewall.config, "UNIT_BACKEND_PORT", 9999)

    assert firewall.block_ip("1.2.3.4") is True
    assert calls[0] == [
        "sudo",
        "ufw",
        "insert",
        "1",
        "deny",
        "from",
        "1.2.3.4",
        "to",
        "any",
        "port",
        "9999",
    ]

    calls.clear()
    monkeypatch.setattr(firewall, "is_ip_blocked", lambda ip: True)
    assert firewall.unblock_ip("1.2.3.4") is True
    assert calls[0] == [
        "sudo",
        "ufw",
        "delete",
        "deny",
        "from",
        "1.2.3.4",
        "to",
        "any",
        "port",
        "9999",
    ]
