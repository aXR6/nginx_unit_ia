import os
import time
import importlib
import sys
import types
import pytest

@pytest.fixture()
def client(monkeypatch):
    os.environ.setdefault("BACKEND_URL", "http://localhost:8000")
    os.environ.setdefault("UNIT_PORT", "8090")
    os.environ.setdefault("WEB_PANEL_PORT", "8080")

    class DummyDetector:
        def analyze(self, text):
            return {
                "anomaly": {"label": "normal", "score": [0.0, 1.0], "model": "dummy"},
                "severity": {"label": "low", "score": [0.0, 1.0], "model": "dummy"},
                "nids": {
                    "label": "normal",
                    "score": [0.0, 1.0],
                    "model": "dummy",
                    "majority": "normal",
                    "majority_score": [0.0, 1.0],
                    "details": [],
                },
                "semantic": {
                    "embedding": [],
                    "similarity": 1.0,
                    "outlier": False,
                    "model": "dummy",
                },
                "intensity": 0.0,
            }

    dummy_mod = types.ModuleType("app.detection")
    dummy_mod.Detector = DummyDetector
    def calculate_intensity(sev_label, anomaly_score, similarity):
        return 0.0
    dummy_mod.calculate_intensity = calculate_intensity
    sys.modules["app.detection"] = dummy_mod

    psyco = types.ModuleType("psycopg2")
    psyco.connect = lambda *a, **k: None
    extras = types.ModuleType("extras")
    class RealDictCursor:
        pass
    class Json:
        def __init__(self, val):
            self.val = val
    extras.RealDictCursor = RealDictCursor
    extras.Json = Json
    psyco.extras = extras
    sys.modules["psycopg2"] = psyco
    sys.modules["psycopg2.extras"] = extras

    es_mod = types.ModuleType("opensearchpy")
    es_mod.OpenSearch = lambda *a, **k: None
    sys.modules["opensearchpy"] = es_mod

    fw_mod = types.ModuleType("app.firewall")
    fw_mod.sync_blocked_ips_with_ufw = lambda: set()
    fw_mod.block_ip = lambda ip: False
    fw_mod.unblock_ip = lambda ip: False
    fw_mod.is_ip_blocked = lambda ip: False
    fw_mod.is_whitelisted = lambda ip: False
    fw_mod.get_ufw_blocked_ips = lambda: set()
    sys.modules["app.firewall"] = fw_mod

    ipinfo_mod = types.ModuleType("app.ipinfo")
    ipinfo_mod.fetch_ip_info = lambda ip: {}
    sys.modules["app.ipinfo"] = ipinfo_mod

    import app.wsgi
    importlib.reload(app.wsgi)

    logs = []
    blocked = []

    def save_log(interface, data, severity, anomaly, nids, semantic=None, ip=None, ip_info=None):
        entry = {
            "id": len(logs) + 1,
            "created_at": time.strftime("%Y-%m-%d %H:%M:%S"),
            "iface": interface,
            "log": data,
            "ip": ip,
            "ip_info": ip_info,
            "severity": severity,
            "anomaly": anomaly,
            "nids": nids,
            "semantic": semantic,
        }
        logs.append(entry)
        return entry["id"], entry["created_at"]

    def get_logs(limit=100, offset=0):
        return logs[offset:offset + limit]

    def save_blocked_ip(ip, reason, status="blocked", ip_info=None):
        blocked.append({
            "ip": ip,
            "reason": reason,
            "status": status,
            "blocked_at": time.strftime("%Y-%m-%d %H:%M:%S"),
            "ip_info": ip_info,
        })

    def get_blocked_ips(limit=100, offset=0):
        return blocked[offset:offset + limit]

    monkeypatch.setattr(app.wsgi.db, "save_log", save_log)
    monkeypatch.setattr(app.wsgi.db, "get_logs", get_logs)
    monkeypatch.setattr(app.wsgi.db, "save_blocked_ip", save_blocked_ip)
    monkeypatch.setattr(app.wsgi.db, "get_blocked_ips", get_blocked_ips)

    return app.wsgi.app.test_client()
